{"version":3,"file":"static/development/pages/index.js","sources":["webpack:///webpack/bootstrap","webpack:///./pages/index.tsx","webpack:///./random-text/src/get-random-text.ts","webpack:///./random-text/src/get-word.ts","webpack:///./random-text/src/pos.ts","webpack:///./random-text/src/specials.ts","webpack:///./random-text/src/utils.ts","webpack:///external \"awesome-debounce-promise\"","webpack:///external \"isomorphic-unfetch\"","webpack:///external \"react\"","webpack:///external \"styled-jsx/style\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","import { useState, useEffect } from 'react';\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport getRandomPhrase from '../random-text/src/get-random-text';\nimport { getRandomWords } from '../random-text/src/utils';\n\nconst NUMBER_OF_PHRASES = 3;\nconst STARTER_PHRASE = 'get random text';\n\nconst getRandomPhrases = async (randomWords: string[]) => {\n  const phrases = [];\n  for (let i = 0; i < NUMBER_OF_PHRASES; i += 1) {\n    try {\n      const phrase = await getRandomPhrase(randomWords);\n      phrases.push(phrase);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  return phrases;\n};\nconst getRandomPhrasesDebounced = AwesomeDebouncePromise(getRandomPhrases, 500);\n\nconst RandomText = ({ randomWords }: { randomWords: string[] }) => {\n  const [phrases, setPhrases] = useState([STARTER_PHRASE]);\n  const [phrase, setPhrase] = useState(STARTER_PHRASE);\n  // useEffect(() => {\n  //   if (!phrases || phrases.length === 0) {\n  //     getRandomPhrases(randomWords).then((newPhrases) => {\n  //       setPhrases(phrases);\n  //     });\n  //   }\n  // });\n\n  const handleClick = () => {\n    console.log('phrases', phrases);\n    setPhrase(phrases[0]);\n    let newPhrases = (phrases && phrases.slice(1)) || [];\n    if (newPhrases.length <= 1) {\n      getRandomPhrasesDebounced(randomWords).then((randomPhrases) => {\n        setPhrases(newPhrases.concat(randomPhrases));\n      });\n    } else {\n      newPhrases = phrases.slice(1);\n      setPhrases(newPhrases);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 onClick={handleClick}>{phrase}</h1>\n      <style jsx global>\n        {`\n          @import url('https://fonts.googleapis.com/css?family=Fira+Code&display=swap');\n          body {\n            background: #000;\n          }\n\n          .container {\n            display: flex;\n            height: 100vh;\n            justify-content: center;\n            align-items: center;\n          }\n\n          h1 {\n            color: rgb(255, 235, 238);\n            cursor: pointer;\n            font: 32px 'fira code', menlo, helvetica, arial, sans-serif;\n          }\n        `}\n      </style>\n    </div>\n  );\n};\n\nconst getInitialProps = async () => {\n  const randomWords = await getRandomWords();\n  return { randomWords };\n};\nRandomText.getInitialProps = getInitialProps;\n\nexport default RandomText;\n","import getSpecialsWord from './specials';\nimport getWord from './get-word';\nimport { getPOS } from './pos';\nimport { isShiftable } from './utils';\n\ntype MuseApiPartsOfSpeech = 'adj' | 'adv' | 'v' | 'n' | 'prop';\ntype Pos =\n  | MuseApiPartsOfSpeech\n  | 'determiners'\n  | 'conjunctions'\n  | 'prepositions';\n\nconst DEFAULT_NUMBER_OF_LETTERS = 200;\nconst WIGGLE_ROOM = 3;\n\nconst getRandomPhrase = async (randomWords: string[]) => {\n  const numberOfLetters = DEFAULT_NUMBER_OF_LETTERS;\n  const partsOfSpeech: Pos[] = ['v', 'adj', 'n'];\n\n  const specialsWord = await getSpecialsWord();\n  let specialsWordPOS: string[] = await getPOS(specialsWord);\n  let str = '';\n\n  while (\n    isShiftable(partsOfSpeech) &&\n    str.length + WIGGLE_ROOM < numberOfLetters\n  ) {\n    const pos = partsOfSpeech.shift();\n    let word = '';\n\n    if (specialsWordPOS.includes(pos)) {\n      word = specialsWord;\n      specialsWordPOS = [];\n    } else {\n      word = await getWord(pos, randomWords);\n      const indexOfWord = randomWords.indexOf(word);\n      randomWords.splice(indexOfWord, 1);\n    }\n\n    if (`${str} ${word}`.length < numberOfLetters) {\n      str += ` ${word}`;\n    }\n  }\n\n  return str.trim();\n};\n\nexport default getRandomPhrase;\n","import { wordIsThisPOS, isMuseApiPartOfSpeech } from './pos';\nimport {\n  getRandomNumber,\n  multilineStrToArrayOfWords,\n  removeNonAlphaChars,\n  shuffleArr,\n  getRandomWords,\n} from './utils';\n\ntype MuseApiPartsOfSpeech = 'adj' | 'adv' | 'v' | 'n' | 'prop';\ntype Pos =\n  | MuseApiPartsOfSpeech\n  | 'determiners'\n  | 'conjunctions'\n  | 'prepositions';\ntype PartialRecord<K extends keyof any, T> = {\n  [P in K]?: T;\n};\ntype Words = PartialRecord<Pos, string[]>;\n\n// TODO: change to 500 when live\nconst prepareWords = (words: string[]) =>\n  shuffleArr(removeNonAlphaChars([...words]));\n\nconst getWords = (): Words => ({\n  conjunctions: 'and but for or so yet nor'.split(' '),\n  prepositions: multilineStrToArrayOfWords(`of in to for with on at from\n        by about as into like through after over between out against during without\n        before under around among`),\n  determiners: 'the this that those every each'.split(' '),\n});\n\nconst getRandomWordFromWords = (pos: Pos) => {\n  const words = getWords();\n  const arr = words[pos];\n  if (arr) {\n    return arr[getRandomNumber(0, arr.length - 1)];\n  }\n\n  return '';\n};\n\nconst getWord = async (pos: Pos, randomWords: string[]) => {\n  const preparedWords = prepareWords(randomWords);\n\n  if (isMuseApiPartOfSpeech(pos)) {\n    for (let i = 0; i < preparedWords.length; i += 1) {\n      const word = preparedWords[i];\n      const isThisPOS = await wordIsThisPOS(word, pos);\n      if (isThisPOS) return word;\n    }\n  }\n\n  getRandomWords().then((moreWords: string[]) => {\n    randomWords = randomWords.concat(moreWords);\n  });\n  return getRandomWordFromWords(pos);\n};\n\nexport default getWord;\n","import fetch from 'isomorphic-unfetch';\n\ntype MuseApiPartsOfSpeech = 'adj' | 'adv' | 'v' | 'n' | 'prop';\ntype Pos =\n  | MuseApiPartsOfSpeech\n  | 'determiners'\n  | 'conjunctions'\n  | 'prepositions';\n\nconst getPOS = async (word: string): Promise<MuseApiPartsOfSpeech[]> => {\n  const pos: MuseApiPartsOfSpeech[] = [];\n  const datamuseApiRes: any = await fetch(\n    `https://api.datamuse.com/words?sp=${word}&md=p&max=1`,\n  );\n  const datamuseApiJson = await datamuseApiRes.json();\n  const wordObj: any = datamuseApiJson[0];\n  if (wordObj && wordObj.tags) {\n    const { tags } = wordObj;\n    return tags;\n  }\n\n  return ['prop'];\n};\n\nconst wordIsThisPOS = async (\n  word: string,\n  pos: MuseApiPartsOfSpeech,\n): Promise<boolean> => {\n  const datamuseApiRes: any = await fetch(\n    `https://api.datamuse.com/words?sp=${word}&md=p&max=1`,\n  );\n  const datamuseApiJson = await datamuseApiRes.json();\n  // console.log(datamuseApiJson);\n  const wordObj: any = datamuseApiJson[0];\n  if (wordObj && wordObj.tags) {\n    const { tags } = wordObj;\n    return tags.includes(pos);\n  }\n  // TODO: REMOVE from randomWords\n  return false;\n};\nconst isPos = (str: string): str is Pos => {\n  const validPos = [\n    'adj',\n    'adv',\n    'conjunctions',\n    'determiners',\n    'n',\n    'v',\n    'prop',\n  ];\n  return validPos.includes(str);\n};\nconst isMuseApiPartOfSpeech = (str: string): str is MuseApiPartsOfSpeech => {\n  const validPos = ['adj', 'adv', 'n', 'v', 'prop'];\n  return validPos.includes(str);\n};\n\nexport { getPOS, wordIsThisPOS, isPos, isMuseApiPartOfSpeech };\n","import { getRandomNumber } from './utils';\n\nconst specials = [\n  'America',\n  'seventies',\n  'pattern',\n  'open',\n  'unknowable',\n  'ghosts',\n  'character',\n  'holographic',\n  'assemblage',\n  'surprised',\n  'unpredictable',\n  'beautiful',\n  'magic',\n  'accretion',\n  'cage',\n  'new',\n  'realities',\n  'reality',\n  'densely',\n  'phenomena',\n  'tattoo',\n  'chemical',\n  'Gloria',\n  'Crispin',\n  'tropical',\n  'electric',\n  'cowboy',\n  'snake',\n  'shark',\n  'tiger',\n  'discrete',\n  'fuzzy',\n  'eight',\n];\n\nconst getSpecialsWord = async () => {\n  const index = getRandomNumber(0, specials.length - 1);\n  return specials[index];\n};\n\nexport default getSpecialsWord;\n","const NUMBER_OF_WORDS_TO_FETCH = 100;\nconst isShiftable = <T>(arr: T[]): arr is { shift(): T } & Array<T> =>\n  arr.length > 0;\nconst multilineStrToArrayOfWords = (str: string) =>\n  str.split(' ').filter((char) => char !== '');\nconst getRandomNumber = (val1: number, val2: number) => {\n  const min = Math.min(val1, val2);\n  const max = Math.max(val1, val2);\n  if (min === max) return min;\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nconst removeNonAlphaChars = (arr: string[]) =>\n  arr.filter((word) => /^[a-z]+$/i.test(word));\nconst shuffleArr = (arr: any[]) => {\n  let currentIndex = arr.length;\n  let temporaryValue;\n  let randomIndex;\n\n  // While there remain elements to shuffle...\n  while (currentIndex !== 0) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = arr[currentIndex];\n    arr[currentIndex] = arr[randomIndex];\n    arr[randomIndex] = temporaryValue;\n  }\n\n  return arr;\n};\nconst getRandomWords = async () => {\n  const wordsApiKeyRes = await fetch(\n    'https://random-word-api.herokuapp.com/key?',\n  );\n  const wordsApiKey = await wordsApiKeyRes.text();\n  const wordsApiRes = await fetch(\n    `https://random-word-api.herokuapp.com/word?key=${wordsApiKey}&number=${NUMBER_OF_WORDS_TO_FETCH}`,\n  );\n  return wordsApiRes.json();\n};\n\nexport {\n  isShiftable,\n  multilineStrToArrayOfWords,\n  getRandomNumber,\n  getRandomWords,\n  removeNonAlphaChars,\n  shuffleArr,\n};\n","module.exports = require(\"awesome-debounce-promise\");","module.exports = require(\"isomorphic-unfetch\");","module.exports = require(\"react\");","module.exports = require(\"styled-jsx/style\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAyBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;;;;;;;;;;;;ACjFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AACA;AACA;AAkBA;AACA;AACA;AAEA;AACA;AACA;;AAAA;AAGA;AALA;AACA;AAOA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC3DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AACA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AASA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzDA;AAAA;AAAA;AAEA;AACA;AAmCA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC1CA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}