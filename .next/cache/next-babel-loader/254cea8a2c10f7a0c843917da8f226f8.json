{"ast":null,"code":"import getSpecialsWord from './specials';\nimport getWord from './get-word';\nimport { getPOS } from './pos';\nimport { isShiftable } from './utils';\nconst DEFAULT_NUMBER_OF_LETTERS = 200;\nconst WIGGLE_ROOM = 3;\n\nconst getRandomPhrase = async randomWords => {\n  const numberOfLetters = DEFAULT_NUMBER_OF_LETTERS;\n  const partsOfSpeech = ['v', 'adj', 'n'];\n  const specialsWord = await getSpecialsWord();\n  let specialsWordPOS = await getPOS(specialsWord);\n  let str = '';\n\n  while (isShiftable(partsOfSpeech) && str.length + WIGGLE_ROOM < numberOfLetters) {\n    const pos = partsOfSpeech.shift();\n    let word = '';\n\n    if (specialsWordPOS.includes(pos)) {\n      word = specialsWord;\n      specialsWordPOS = [];\n    } else {\n      word = await getWord(pos, randomWords);\n      const indexOfWord = randomWords.indexOf(word);\n      randomWords.splice(indexOfWord, 1);\n    }\n\n    if (`${str} ${word}`.length < numberOfLetters) {\n      str += ` ${word}`;\n    }\n  }\n\n  return str.trim();\n};\n\nexport default getRandomPhrase;","map":{"version":3,"sources":["/Users/jasonoverby/p/random-text-site/random-text/src/get-random-text.ts"],"names":["getSpecialsWord","getWord","getPOS","isShiftable","DEFAULT_NUMBER_OF_LETTERS","WIGGLE_ROOM","getRandomPhrase","randomWords","numberOfLetters","partsOfSpeech","specialsWord","specialsWordPOS","str","length","pos","shift","word","includes","indexOfWord","indexOf","splice","trim"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,YAA5B;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,MAAT,QAAuB,OAAvB;AACA,SAASC,WAAT,QAA4B,SAA5B;AASA,MAAMC,yBAAyB,GAAG,GAAlC;AACA,MAAMC,WAAW,GAAG,CAApB;;AAEA,MAAMC,eAAe,GAAG,MAAOC,WAAP,IAAiC;AACvD,QAAMC,eAAe,GAAGJ,yBAAxB;AACA,QAAMK,aAAoB,GAAG,CAAC,GAAD,EAAM,KAAN,EAAa,GAAb,CAA7B;AAEA,QAAMC,YAAY,GAAG,MAAMV,eAAe,EAA1C;AACA,MAAIW,eAAyB,GAAG,MAAMT,MAAM,CAACQ,YAAD,CAA5C;AACA,MAAIE,GAAG,GAAG,EAAV;;AAEA,SACET,WAAW,CAACM,aAAD,CAAX,IACAG,GAAG,CAACC,MAAJ,GAAaR,WAAb,GAA2BG,eAF7B,EAGE;AACA,UAAMM,GAAG,GAAGL,aAAa,CAACM,KAAd,EAAZ;AACA,QAAIC,IAAI,GAAG,EAAX;;AAEA,QAAIL,eAAe,CAACM,QAAhB,CAAyBH,GAAzB,CAAJ,EAAmC;AACjCE,MAAAA,IAAI,GAAGN,YAAP;AACAC,MAAAA,eAAe,GAAG,EAAlB;AACD,KAHD,MAGO;AACLK,MAAAA,IAAI,GAAG,MAAMf,OAAO,CAACa,GAAD,EAAMP,WAAN,CAApB;AACA,YAAMW,WAAW,GAAGX,WAAW,CAACY,OAAZ,CAAoBH,IAApB,CAApB;AACAT,MAAAA,WAAW,CAACa,MAAZ,CAAmBF,WAAnB,EAAgC,CAAhC;AACD;;AAED,QAAK,GAAEN,GAAI,IAAGI,IAAK,EAAf,CAAiBH,MAAjB,GAA0BL,eAA9B,EAA+C;AAC7CI,MAAAA,GAAG,IAAK,IAAGI,IAAK,EAAhB;AACD;AACF;;AAED,SAAOJ,GAAG,CAACS,IAAJ,EAAP;AACD,CA9BD;;AAgCA,eAAef,eAAf","sourcesContent":["import getSpecialsWord from './specials';\nimport getWord from './get-word';\nimport { getPOS } from './pos';\nimport { isShiftable } from './utils';\n\ntype MuseApiPartsOfSpeech = 'adj' | 'adv' | 'v' | 'n' | 'prop';\ntype Pos =\n  | MuseApiPartsOfSpeech\n  | 'determiners'\n  | 'conjunctions'\n  | 'prepositions';\n\nconst DEFAULT_NUMBER_OF_LETTERS = 200;\nconst WIGGLE_ROOM = 3;\n\nconst getRandomPhrase = async (randomWords: string[]) => {\n  const numberOfLetters = DEFAULT_NUMBER_OF_LETTERS;\n  const partsOfSpeech: Pos[] = ['v', 'adj', 'n'];\n\n  const specialsWord = await getSpecialsWord();\n  let specialsWordPOS: string[] = await getPOS(specialsWord);\n  let str = '';\n\n  while (\n    isShiftable(partsOfSpeech) &&\n    str.length + WIGGLE_ROOM < numberOfLetters\n  ) {\n    const pos = partsOfSpeech.shift();\n    let word = '';\n\n    if (specialsWordPOS.includes(pos)) {\n      word = specialsWord;\n      specialsWordPOS = [];\n    } else {\n      word = await getWord(pos, randomWords);\n      const indexOfWord = randomWords.indexOf(word);\n      randomWords.splice(indexOfWord, 1);\n    }\n\n    if (`${str} ${word}`.length < numberOfLetters) {\n      str += ` ${word}`;\n    }\n  }\n\n  return str.trim();\n};\n\nexport default getRandomPhrase;\n"]},"metadata":{},"sourceType":"module"}