{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport { wordIsThisPOS, isMuseApiPartOfSpeech } from './pos';\nimport { getRandomNumber, multilineStrToArrayOfWords, removeNonAlphaChars, shuffleArr, getRandomWords } from './utils';\n\n// TODO: change to 500 when live\nvar prepareWords = function prepareWords(words) {\n  return shuffleArr(removeNonAlphaChars(_toConsumableArray(words)));\n};\n\nvar getWords = function getWords() {\n  return {\n    conjunctions: 'and but for or so yet nor'.split(' '),\n    prepositions: multilineStrToArrayOfWords(\"of in to for with on at from\\n        by about as into like through after over between out against during without\\n        before under around among\"),\n    determiners: 'the this that those every each'.split(' ')\n  };\n};\n\nvar getRandomWordFromWords = function getRandomWordFromWords(pos) {\n  var words = getWords();\n  var arr = words[pos];\n\n  if (arr) {\n    return arr[getRandomNumber(0, arr.length - 1)];\n  }\n\n  return '';\n};\n\nvar getWord =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(pos, randomWords) {\n    var preparedWords, i, word, isThisPOS;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            preparedWords = prepareWords(randomWords);\n\n            if (!isMuseApiPartOfSpeech(pos)) {\n              _context.next = 13;\n              break;\n            }\n\n            i = 0;\n\n          case 3:\n            if (!(i < preparedWords.length)) {\n              _context.next = 13;\n              break;\n            }\n\n            word = preparedWords[i];\n            _context.next = 7;\n            return wordIsThisPOS(word, pos);\n\n          case 7:\n            isThisPOS = _context.sent;\n\n            if (!isThisPOS) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt(\"return\", word);\n\n          case 10:\n            i += 1;\n            _context.next = 3;\n            break;\n\n          case 13:\n            getRandomWords().then(function (moreWords) {\n              randomWords = randomWords.concat(moreWords);\n            });\n            return _context.abrupt(\"return\", getRandomWordFromWords(pos));\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getWord(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default getWord;","map":{"version":3,"sources":["/Users/jasonoverby/p/random-text-site/random-text/src/get-word.ts"],"names":["wordIsThisPOS","isMuseApiPartOfSpeech","getRandomNumber","multilineStrToArrayOfWords","removeNonAlphaChars","shuffleArr","getRandomWords","prepareWords","words","getWords","conjunctions","split","prepositions","determiners","getRandomWordFromWords","pos","arr","length","getWord","randomWords","preparedWords","i","word","isThisPOS","then","moreWords","concat"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,qBAAxB,QAAqD,OAArD;AACA,SACEC,eADF,EAEEC,0BAFF,EAGEC,mBAHF,EAIEC,UAJF,EAKEC,cALF,QAMO,SANP;;AAmBA;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD;AAAA,SACnBH,UAAU,CAACD,mBAAmB,oBAAKI,KAAL,EAApB,CADS;AAAA,CAArB;;AAGA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAc;AAC7BC,IAAAA,YAAY,EAAE,4BAA4BC,KAA5B,CAAkC,GAAlC,CADe;AAE7BC,IAAAA,YAAY,EAAET,0BAA0B,wJAFX;AAK7BU,IAAAA,WAAW,EAAE,iCAAiCF,KAAjC,CAAuC,GAAvC;AALgB,GAAd;AAAA,CAAjB;;AAQA,IAAMG,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,GAAD,EAAc;AAC3C,MAAMP,KAAK,GAAGC,QAAQ,EAAtB;AACA,MAAMO,GAAG,GAAGR,KAAK,CAACO,GAAD,CAAjB;;AACA,MAAIC,GAAJ,EAAS;AACP,WAAOA,GAAG,CAACd,eAAe,CAAC,CAAD,EAAIc,GAAG,CAACC,MAAJ,GAAa,CAAjB,CAAhB,CAAV;AACD;;AAED,SAAO,EAAP;AACD,CARD;;AAUA,IAAMC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOH,GAAP,EAAiBI,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACRC,YAAAA,aADQ,GACQb,YAAY,CAACY,WAAD,CADpB;;AAAA,iBAGVlB,qBAAqB,CAACc,GAAD,CAHX;AAAA;AAAA;AAAA;;AAIHM,YAAAA,CAJG,GAIC,CAJD;;AAAA;AAAA,kBAIIA,CAAC,GAAGD,aAAa,CAACH,MAJtB;AAAA;AAAA;AAAA;;AAKJK,YAAAA,IALI,GAKGF,aAAa,CAACC,CAAD,CALhB;AAAA;AAAA,mBAMcrB,aAAa,CAACsB,IAAD,EAAOP,GAAP,CAN3B;;AAAA;AAMJQ,YAAAA,SANI;;AAAA,iBAONA,SAPM;AAAA;AAAA;AAAA;;AAAA,6CAOYD,IAPZ;;AAAA;AAI8BD,YAAAA,CAAC,IAAI,CAJnC;AAAA;AAAA;;AAAA;AAWdf,YAAAA,cAAc,GAAGkB,IAAjB,CAAsB,UAACC,SAAD,EAAyB;AAC7CN,cAAAA,WAAW,GAAGA,WAAW,CAACO,MAAZ,CAAmBD,SAAnB,CAAd;AACD,aAFD;AAXc,6CAcPX,sBAAsB,CAACC,GAAD,CAdf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPG,OAAO;AAAA;AAAA;AAAA,GAAb;;AAiBA,eAAeA,OAAf","sourcesContent":["import { wordIsThisPOS, isMuseApiPartOfSpeech } from './pos';\nimport {\n  getRandomNumber,\n  multilineStrToArrayOfWords,\n  removeNonAlphaChars,\n  shuffleArr,\n  getRandomWords,\n} from './utils';\n\ntype MuseApiPartsOfSpeech = 'adj' | 'adv' | 'v' | 'n' | 'prop';\ntype Pos =\n  | MuseApiPartsOfSpeech\n  | 'determiners'\n  | 'conjunctions'\n  | 'prepositions';\ntype PartialRecord<K extends keyof any, T> = {\n  [P in K]?: T;\n};\ntype Words = PartialRecord<Pos, string[]>;\n\n// TODO: change to 500 when live\nconst prepareWords = (words: string[]) =>\n  shuffleArr(removeNonAlphaChars([...words]));\n\nconst getWords = (): Words => ({\n  conjunctions: 'and but for or so yet nor'.split(' '),\n  prepositions: multilineStrToArrayOfWords(`of in to for with on at from\n        by about as into like through after over between out against during without\n        before under around among`),\n  determiners: 'the this that those every each'.split(' '),\n});\n\nconst getRandomWordFromWords = (pos: Pos) => {\n  const words = getWords();\n  const arr = words[pos];\n  if (arr) {\n    return arr[getRandomNumber(0, arr.length - 1)];\n  }\n\n  return '';\n};\n\nconst getWord = async (pos: Pos, randomWords: string[]) => {\n  const preparedWords = prepareWords(randomWords);\n\n  if (isMuseApiPartOfSpeech(pos)) {\n    for (let i = 0; i < preparedWords.length; i += 1) {\n      const word = preparedWords[i];\n      const isThisPOS = await wordIsThisPOS(word, pos);\n      if (isThisPOS) return word;\n    }\n  }\n\n  getRandomWords().then((moreWords: string[]) => {\n    randomWords = randomWords.concat(moreWords);\n  });\n  return getRandomWordFromWords(pos);\n};\n\nexport default getWord;\n"]},"metadata":{},"sourceType":"module"}