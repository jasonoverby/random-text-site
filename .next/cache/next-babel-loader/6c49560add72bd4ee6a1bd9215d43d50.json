{"ast":null,"code":"import { wordIsThisPOS, isMuseApiPartOfSpeech } from './pos';\nimport { getRandomNumber, multilineStrToArrayOfWords, removeNonAlphaChars, shuffleArr, getRandomWords } from './utils';\n\n// TODO: change to 500 when live\nconst prepareWords = words => shuffleArr(removeNonAlphaChars([...words]));\n\nconst getWords = () => ({\n  conjunctions: 'and but for or so yet nor'.split(' '),\n  prepositions: multilineStrToArrayOfWords(`of in to for with on at from\n        by about as into like through after over between out against during without\n        before under around among`),\n  determiners: 'the this that those every each'.split(' ')\n});\n\nconst getRandomWordFromWords = pos => {\n  const words = getWords();\n  const arr = words[pos];\n\n  if (arr) {\n    return arr[getRandomNumber(0, arr.length - 1)];\n  }\n\n  return '';\n};\n\nconst getWord = async (pos, randomWords) => {\n  const preparedWords = prepareWords(randomWords);\n\n  if (isMuseApiPartOfSpeech(pos)) {\n    for (let i = 0; i < preparedWords.length; i += 1) {\n      const word = preparedWords[i];\n      const isThisPOS = await wordIsThisPOS(word, pos);\n      if (isThisPOS) return word;\n    }\n  }\n\n  getRandomWords().then(moreWords => {\n    randomWords = randomWords.concat(moreWords);\n  });\n  return getRandomWordFromWords(pos);\n};\n\nexport default getWord;","map":{"version":3,"sources":["/Users/jasonoverby/p/random-text-site/random-text/src/get-word.ts"],"names":["wordIsThisPOS","isMuseApiPartOfSpeech","getRandomNumber","multilineStrToArrayOfWords","removeNonAlphaChars","shuffleArr","getRandomWords","prepareWords","words","getWords","conjunctions","split","prepositions","determiners","getRandomWordFromWords","pos","arr","length","getWord","randomWords","preparedWords","i","word","isThisPOS","then","moreWords","concat"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,qBAAxB,QAAqD,OAArD;AACA,SACEC,eADF,EAEEC,0BAFF,EAGEC,mBAHF,EAIEC,UAJF,EAKEC,cALF,QAMO,SANP;;AAmBA;AACA,MAAMC,YAAY,GAAIC,KAAD,IACnBH,UAAU,CAACD,mBAAmB,CAAC,CAAC,GAAGI,KAAJ,CAAD,CAApB,CADZ;;AAGA,MAAMC,QAAQ,GAAG,OAAc;AAC7BC,EAAAA,YAAY,EAAE,4BAA4BC,KAA5B,CAAkC,GAAlC,CADe;AAE7BC,EAAAA,YAAY,EAAET,0BAA0B,CAAE;;kCAAF,CAFX;AAK7BU,EAAAA,WAAW,EAAE,iCAAiCF,KAAjC,CAAuC,GAAvC;AALgB,CAAd,CAAjB;;AAQA,MAAMG,sBAAsB,GAAIC,GAAD,IAAc;AAC3C,QAAMP,KAAK,GAAGC,QAAQ,EAAtB;AACA,QAAMO,GAAG,GAAGR,KAAK,CAACO,GAAD,CAAjB;;AACA,MAAIC,GAAJ,EAAS;AACP,WAAOA,GAAG,CAACd,eAAe,CAAC,CAAD,EAAIc,GAAG,CAACC,MAAJ,GAAa,CAAjB,CAAhB,CAAV;AACD;;AAED,SAAO,EAAP;AACD,CARD;;AAUA,MAAMC,OAAO,GAAG,OAAOH,GAAP,EAAiBI,WAAjB,KAA2C;AACzD,QAAMC,aAAa,GAAGb,YAAY,CAACY,WAAD,CAAlC;;AAEA,MAAIlB,qBAAqB,CAACc,GAAD,CAAzB,EAAgC;AAC9B,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,aAAa,CAACH,MAAlC,EAA0CI,CAAC,IAAI,CAA/C,EAAkD;AAChD,YAAMC,IAAI,GAAGF,aAAa,CAACC,CAAD,CAA1B;AACA,YAAME,SAAS,GAAG,MAAMvB,aAAa,CAACsB,IAAD,EAAOP,GAAP,CAArC;AACA,UAAIQ,SAAJ,EAAe,OAAOD,IAAP;AAChB;AACF;;AAEDhB,EAAAA,cAAc,GAAGkB,IAAjB,CAAuBC,SAAD,IAAyB;AAC7CN,IAAAA,WAAW,GAAGA,WAAW,CAACO,MAAZ,CAAmBD,SAAnB,CAAd;AACD,GAFD;AAGA,SAAOX,sBAAsB,CAACC,GAAD,CAA7B;AACD,CAfD;;AAiBA,eAAeG,OAAf","sourcesContent":["import { wordIsThisPOS, isMuseApiPartOfSpeech } from './pos';\nimport {\n  getRandomNumber,\n  multilineStrToArrayOfWords,\n  removeNonAlphaChars,\n  shuffleArr,\n  getRandomWords,\n} from './utils';\n\ntype MuseApiPartsOfSpeech = 'adj' | 'adv' | 'v' | 'n' | 'prop';\ntype Pos =\n  | MuseApiPartsOfSpeech\n  | 'determiners'\n  | 'conjunctions'\n  | 'prepositions';\ntype PartialRecord<K extends keyof any, T> = {\n  [P in K]?: T;\n};\ntype Words = PartialRecord<Pos, string[]>;\n\n// TODO: change to 500 when live\nconst prepareWords = (words: string[]) =>\n  shuffleArr(removeNonAlphaChars([...words]));\n\nconst getWords = (): Words => ({\n  conjunctions: 'and but for or so yet nor'.split(' '),\n  prepositions: multilineStrToArrayOfWords(`of in to for with on at from\n        by about as into like through after over between out against during without\n        before under around among`),\n  determiners: 'the this that those every each'.split(' '),\n});\n\nconst getRandomWordFromWords = (pos: Pos) => {\n  const words = getWords();\n  const arr = words[pos];\n  if (arr) {\n    return arr[getRandomNumber(0, arr.length - 1)];\n  }\n\n  return '';\n};\n\nconst getWord = async (pos: Pos, randomWords: string[]) => {\n  const preparedWords = prepareWords(randomWords);\n\n  if (isMuseApiPartOfSpeech(pos)) {\n    for (let i = 0; i < preparedWords.length; i += 1) {\n      const word = preparedWords[i];\n      const isThisPOS = await wordIsThisPOS(word, pos);\n      if (isThisPOS) return word;\n    }\n  }\n\n  getRandomWords().then((moreWords: string[]) => {\n    randomWords = randomWords.concat(moreWords);\n  });\n  return getRandomWordFromWords(pos);\n};\n\nexport default getWord;\n"]},"metadata":{},"sourceType":"module"}