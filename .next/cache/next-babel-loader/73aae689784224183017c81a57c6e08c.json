{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport getSpecialsWord from './specials';\nimport getWord from './get-word';\nimport { getPOS } from './pos';\nimport { isShiftable } from './utils';\nvar DEFAULT_NUMBER_OF_LETTERS = 200;\nvar WIGGLE_ROOM = 3;\n\nvar getRandomPhrase =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(randomWords) {\n    var numberOfLetters, partsOfSpeech, specialsWord, specialsWordPOS, str, pos, word, indexOfWord;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            numberOfLetters = DEFAULT_NUMBER_OF_LETTERS;\n            partsOfSpeech = ['v', 'adj', 'n'];\n            _context.next = 4;\n            return getSpecialsWord();\n\n          case 4:\n            specialsWord = _context.sent;\n            _context.next = 7;\n            return getPOS(specialsWord);\n\n          case 7:\n            specialsWordPOS = _context.sent;\n            str = '';\n\n          case 9:\n            if (!(isShiftable(partsOfSpeech) && str.length + WIGGLE_ROOM < numberOfLetters)) {\n              _context.next = 25;\n              break;\n            }\n\n            pos = partsOfSpeech.shift();\n            word = '';\n\n            if (!specialsWordPOS.includes(pos)) {\n              _context.next = 17;\n              break;\n            }\n\n            word = specialsWord;\n            specialsWordPOS = [];\n            _context.next = 22;\n            break;\n\n          case 17:\n            _context.next = 19;\n            return getWord(pos, randomWords);\n\n          case 19:\n            word = _context.sent;\n            indexOfWord = randomWords.indexOf(word);\n            randomWords.splice(indexOfWord, 1);\n\n          case 22:\n            if (\"\".concat(str, \" \").concat(word).length < numberOfLetters) {\n              str += \" \".concat(word);\n            }\n\n            _context.next = 9;\n            break;\n\n          case 25:\n            return _context.abrupt(\"return\", str.trim());\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getRandomPhrase(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default getRandomPhrase;","map":{"version":3,"sources":["/Users/jasonoverby/p/random-text-site/random-text/src/get-random-text.ts"],"names":["getSpecialsWord","getWord","getPOS","isShiftable","DEFAULT_NUMBER_OF_LETTERS","WIGGLE_ROOM","getRandomPhrase","randomWords","numberOfLetters","partsOfSpeech","specialsWord","specialsWordPOS","str","length","pos","shift","word","includes","indexOfWord","indexOf","splice","trim"],"mappings":";;AAAA,OAAOA,eAAP,MAA4B,YAA5B;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAASC,MAAT,QAAuB,OAAvB;AACA,SAASC,WAAT,QAA4B,SAA5B;AASA,IAAMC,yBAAyB,GAAG,GAAlC;AACA,IAAMC,WAAW,GAAG,CAApB;;AAEA,IAAMC,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOC,WAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,YAAAA,eADgB,GACEJ,yBADF;AAEhBK,YAAAA,aAFgB,GAEO,CAAC,GAAD,EAAM,KAAN,EAAa,GAAb,CAFP;AAAA;AAAA,mBAIKT,eAAe,EAJpB;;AAAA;AAIhBU,YAAAA,YAJgB;AAAA;AAAA,mBAKgBR,MAAM,CAACQ,YAAD,CALtB;;AAAA;AAKlBC,YAAAA,eALkB;AAMlBC,YAAAA,GANkB,GAMZ,EANY;;AAAA;AAAA,kBASpBT,WAAW,CAACM,aAAD,CAAX,IACAG,GAAG,CAACC,MAAJ,GAAaR,WAAb,GAA2BG,eAVP;AAAA;AAAA;AAAA;;AAYdM,YAAAA,GAZc,GAYRL,aAAa,CAACM,KAAd,EAZQ;AAahBC,YAAAA,IAbgB,GAaT,EAbS;;AAAA,iBAehBL,eAAe,CAACM,QAAhB,CAAyBH,GAAzB,CAfgB;AAAA;AAAA;AAAA;;AAgBlBE,YAAAA,IAAI,GAAGN,YAAP;AACAC,YAAAA,eAAe,GAAG,EAAlB;AAjBkB;AAAA;;AAAA;AAAA;AAAA,mBAmBLV,OAAO,CAACa,GAAD,EAAMP,WAAN,CAnBF;;AAAA;AAmBlBS,YAAAA,IAnBkB;AAoBZE,YAAAA,WApBY,GAoBEX,WAAW,CAACY,OAAZ,CAAoBH,IAApB,CApBF;AAqBlBT,YAAAA,WAAW,CAACa,MAAZ,CAAmBF,WAAnB,EAAgC,CAAhC;;AArBkB;AAwBpB,gBAAI,UAAGN,GAAH,cAAUI,IAAV,EAAiBH,MAAjB,GAA0BL,eAA9B,EAA+C;AAC7CI,cAAAA,GAAG,eAAQI,IAAR,CAAH;AACD;;AA1BmB;AAAA;;AAAA;AAAA,6CA6BfJ,GAAG,CAACS,IAAJ,EA7Be;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAff,eAAe;AAAA;AAAA;AAAA,GAArB;;AAgCA,eAAeA,eAAf","sourcesContent":["import getSpecialsWord from './specials';\nimport getWord from './get-word';\nimport { getPOS } from './pos';\nimport { isShiftable } from './utils';\n\ntype MuseApiPartsOfSpeech = 'adj' | 'adv' | 'v' | 'n' | 'prop';\ntype Pos =\n  | MuseApiPartsOfSpeech\n  | 'determiners'\n  | 'conjunctions'\n  | 'prepositions';\n\nconst DEFAULT_NUMBER_OF_LETTERS = 200;\nconst WIGGLE_ROOM = 3;\n\nconst getRandomPhrase = async (randomWords: string[]) => {\n  const numberOfLetters = DEFAULT_NUMBER_OF_LETTERS;\n  const partsOfSpeech: Pos[] = ['v', 'adj', 'n'];\n\n  const specialsWord = await getSpecialsWord();\n  let specialsWordPOS: string[] = await getPOS(specialsWord);\n  let str = '';\n\n  while (\n    isShiftable(partsOfSpeech) &&\n    str.length + WIGGLE_ROOM < numberOfLetters\n  ) {\n    const pos = partsOfSpeech.shift();\n    let word = '';\n\n    if (specialsWordPOS.includes(pos)) {\n      word = specialsWord;\n      specialsWordPOS = [];\n    } else {\n      word = await getWord(pos, randomWords);\n      const indexOfWord = randomWords.indexOf(word);\n      randomWords.splice(indexOfWord, 1);\n    }\n\n    if (`${str} ${word}`.length < numberOfLetters) {\n      str += ` ${word}`;\n    }\n  }\n\n  return str.trim();\n};\n\nexport default getRandomPhrase;\n"]},"metadata":{},"sourceType":"module"}