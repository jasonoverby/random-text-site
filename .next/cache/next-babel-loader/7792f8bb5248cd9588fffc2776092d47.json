{"ast":null,"code":"var _jsxFileName = \"/Users/jasonoverby/p/random-text-site/pages/index.tsx\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport getRandomPhrase from '../random-text/src/get-random-text';\nimport { getRandomWords, getRandomNumber } from '../random-text/src/utils';\nimport * as textJson from '../random-text/text/strings.json';\nconst NUMBER_OF_PHRASES = 3;\nconst STARTER_PHRASE = 'get random text';\nconst STOCK_PHRASES = textJson.phrases;\n\nconst getRandomPhrases = async randomWords => {\n  const phrases = [];\n\n  for (let i = 0; i < NUMBER_OF_PHRASES; i += 1) {\n    try {\n      const phrase = await getRandomPhrase(randomWords);\n      phrases.push(phrase);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  return phrases;\n};\n\nconst getRandomPhrasesDebounced = AwesomeDebouncePromise(getRandomPhrases, 500);\n\nconst getPhrase = (phrases, phrase) => {\n  const randomIndex = getRandomNumber(0, STOCK_PHRASES.length - 1);\n  return STOCK_PHRASES[randomIndex];\n};\n\nconst RandomText = ({\n  randomWords\n}) => {\n  const {\n    0: phrases,\n    1: setPhrases\n  } = useState([STARTER_PHRASE]);\n  const {\n    0: phrase,\n    1: setPhrase\n  } = useState(STARTER_PHRASE);\n\n  const handleClick = () => {\n    console.log('phrases', phrases);\n    const newPhrase = getPhrase(phrases, phrase);\n\n    if (phrase === phrases[0]) {\n      const newPhrases = [newPhrase, ...phrases.slice(1)];\n      setPhrase(newPhrase);\n      setPhrases(newPhrases);\n    } else {\n      setPhrase(phrases[0]);\n    }\n\n    let newPhrases = phrases && phrases.slice(1) || [];\n\n    if (newPhrases.length <= 1) {\n      getRandomPhrasesDebounced(randomWords).then(randomPhrases => {\n        setPhrases(newPhrases.concat(randomPhrases));\n      });\n    } else {\n      newPhrases = phrases.slice(1);\n      setPhrases(newPhrases);\n    }\n  };\n\n  return __jsx(\"div\", {\n    className: \"jsx-1924471468\" + \" \" + \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    onClick: handleClick,\n    className: \"jsx-1924471468\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, phrase), __jsx(_JSXStyle, {\n    id: \"1924471468\",\n    __self: this\n  }, \"@import url('https://fonts.googleapis.com/css?family=Fira+Code&display=swap');body{background:#000;}.container{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;height:100vh;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}h1{color:rgb(255,235,238);cursor:pointer;font:32px 'fira code',menlo,helvetica,arial,sans-serif;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9qYXNvbm92ZXJieS9wL3JhbmRvbS10ZXh0LXNpdGUvcGFnZXMvaW5kZXgudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlEUyxBQUV3RixBQUUzRCxBQUlILEFBT1ksZ0JBVjNCLE9BV2lCLGVBQzRDLG9DQVI5QyxhQUNVLE1BUXpCLDZGQVBxQiw2RkFDckIiLCJmaWxlIjoiL1VzZXJzL2phc29ub3ZlcmJ5L3AvcmFuZG9tLXRleHQtc2l0ZS9wYWdlcy9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBBd2Vzb21lRGVib3VuY2VQcm9taXNlIGZyb20gJ2F3ZXNvbWUtZGVib3VuY2UtcHJvbWlzZSc7XG5pbXBvcnQgZ2V0UmFuZG9tUGhyYXNlIGZyb20gJy4uL3JhbmRvbS10ZXh0L3NyYy9nZXQtcmFuZG9tLXRleHQnO1xuaW1wb3J0IHsgZ2V0UmFuZG9tV29yZHMsIGdldFJhbmRvbU51bWJlciB9IGZyb20gJy4uL3JhbmRvbS10ZXh0L3NyYy91dGlscyc7XG5pbXBvcnQgKiBhcyB0ZXh0SnNvbiBmcm9tICcuLi9yYW5kb20tdGV4dC90ZXh0L3N0cmluZ3MuanNvbic7XG5cbmNvbnN0IE5VTUJFUl9PRl9QSFJBU0VTID0gMztcbmNvbnN0IFNUQVJURVJfUEhSQVNFID0gJ2dldCByYW5kb20gdGV4dCc7XG5jb25zdCBTVE9DS19QSFJBU0VTID0gdGV4dEpzb24ucGhyYXNlcztcblxuY29uc3QgZ2V0UmFuZG9tUGhyYXNlcyA9IGFzeW5jIChyYW5kb21Xb3Jkczogc3RyaW5nW10pID0+IHtcbiAgY29uc3QgcGhyYXNlcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IE5VTUJFUl9PRl9QSFJBU0VTOyBpICs9IDEpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcGhyYXNlID0gYXdhaXQgZ2V0UmFuZG9tUGhyYXNlKHJhbmRvbVdvcmRzKTtcbiAgICAgIHBocmFzZXMucHVzaChwaHJhc2UpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBocmFzZXM7XG59O1xuY29uc3QgZ2V0UmFuZG9tUGhyYXNlc0RlYm91bmNlZCA9IEF3ZXNvbWVEZWJvdW5jZVByb21pc2UoZ2V0UmFuZG9tUGhyYXNlcywgNTAwKTtcbmNvbnN0IGdldFBocmFzZSA9IChwaHJhc2VzOiBzdHJpbmdbXSwgcGhyYXNlOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgcmFuZG9tSW5kZXggPSBnZXRSYW5kb21OdW1iZXIoMCwgU1RPQ0tfUEhSQVNFUy5sZW5ndGggLSAxKTtcbiAgcmV0dXJuIFNUT0NLX1BIUkFTRVNbcmFuZG9tSW5kZXhdO1xufTtcblxuY29uc3QgUmFuZG9tVGV4dCA9ICh7IHJhbmRvbVdvcmRzIH06IHsgcmFuZG9tV29yZHM6IHN0cmluZ1tdIH0pID0+IHtcbiAgY29uc3QgW3BocmFzZXMsIHNldFBocmFzZXNdID0gdXNlU3RhdGUoW1NUQVJURVJfUEhSQVNFXSk7XG4gIGNvbnN0IFtwaHJhc2UsIHNldFBocmFzZV0gPSB1c2VTdGF0ZShTVEFSVEVSX1BIUkFTRSk7XG5cbiAgY29uc3QgaGFuZGxlQ2xpY2sgPSAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ3BocmFzZXMnLCBwaHJhc2VzKTtcbiAgICBjb25zdCBuZXdQaHJhc2UgPSBnZXRQaHJhc2UocGhyYXNlcywgcGhyYXNlKTtcbiAgICBpZiAocGhyYXNlID09PSBwaHJhc2VzWzBdKSB7XG4gICAgICBjb25zdCBuZXdQaHJhc2VzID0gW25ld1BocmFzZSwgLi4ucGhyYXNlcy5zbGljZSgxKV07XG4gICAgICBzZXRQaHJhc2UobmV3UGhyYXNlKTtcbiAgICAgIHNldFBocmFzZXMobmV3UGhyYXNlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFBocmFzZShwaHJhc2VzWzBdKTtcbiAgICB9XG4gICAgbGV0IG5ld1BocmFzZXMgPSAocGhyYXNlcyAmJiBwaHJhc2VzLnNsaWNlKDEpKSB8fCBbXTtcbiAgICBpZiAobmV3UGhyYXNlcy5sZW5ndGggPD0gMSkge1xuICAgICAgZ2V0UmFuZG9tUGhyYXNlc0RlYm91bmNlZChyYW5kb21Xb3JkcykudGhlbigocmFuZG9tUGhyYXNlcykgPT4ge1xuICAgICAgICBzZXRQaHJhc2VzKG5ld1BocmFzZXMuY29uY2F0KHJhbmRvbVBocmFzZXMpKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdQaHJhc2VzID0gcGhyYXNlcy5zbGljZSgxKTtcbiAgICAgIHNldFBocmFzZXMobmV3UGhyYXNlcyk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXJcIj5cbiAgICAgIDxoMSBvbkNsaWNrPXtoYW5kbGVDbGlja30+e3BocmFzZX08L2gxPlxuICAgICAgPHN0eWxlIGpzeCBnbG9iYWw+XG4gICAgICAgIHtgXG4gICAgICAgICAgQGltcG9ydCB1cmwoJ2h0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1GaXJhK0NvZGUmZGlzcGxheT1zd2FwJyk7XG4gICAgICAgICAgYm9keSB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiAjMDAwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC5jb250YWluZXIge1xuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICAgIGhlaWdodDogMTAwdmg7XG4gICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaDEge1xuICAgICAgICAgICAgY29sb3I6IHJnYigyNTUsIDIzNSwgMjM4KTtcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgICAgIGZvbnQ6IDMycHggJ2ZpcmEgY29kZScsIG1lbmxvLCBoZWx2ZXRpY2EsIGFyaWFsLCBzYW5zLXNlcmlmO1xuICAgICAgICAgIH1cbiAgICAgICAgYH1cbiAgICAgIDwvc3R5bGU+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5jb25zdCBnZXRJbml0aWFsUHJvcHMgPSBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHJhbmRvbVdvcmRzID0gYXdhaXQgZ2V0UmFuZG9tV29yZHMoKTtcbiAgcmV0dXJuIHsgcmFuZG9tV29yZHMgfTtcbn07XG5SYW5kb21UZXh0LmdldEluaXRpYWxQcm9wcyA9IGdldEluaXRpYWxQcm9wcztcblxuZXhwb3J0IGRlZmF1bHQgUmFuZG9tVGV4dDtcbiJdfQ== */\\n/*@ sourceURL=/Users/jasonoverby/p/random-text-site/pages/index.tsx */\"));\n};\n\nconst getInitialProps = async () => {\n  const randomWords = await getRandomWords();\n  return {\n    randomWords\n  };\n};\n\nRandomText.getInitialProps = getInitialProps;\nexport default RandomText;","map":{"version":3,"sources":["/Users/jasonoverby/p/random-text-site/pages/index.tsx"],"names":["useState","AwesomeDebouncePromise","getRandomPhrase","getRandomWords","getRandomNumber","textJson","NUMBER_OF_PHRASES","STARTER_PHRASE","STOCK_PHRASES","phrases","getRandomPhrases","randomWords","i","phrase","push","err","console","log","getRandomPhrasesDebounced","getPhrase","randomIndex","length","RandomText","setPhrases","setPhrase","handleClick","newPhrase","newPhrases","slice","then","randomPhrases","concat","getInitialProps"],"mappings":";;;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,SAASC,cAAT,EAAyBC,eAAzB,QAAgD,0BAAhD;AACA,OAAO,KAAKC,QAAZ,MAA0B,kCAA1B;AAEA,MAAMC,iBAAiB,GAAG,CAA1B;AACA,MAAMC,cAAc,GAAG,iBAAvB;AACA,MAAMC,aAAa,GAAGH,QAAQ,CAACI,OAA/B;;AAEA,MAAMC,gBAAgB,GAAG,MAAOC,WAAP,IAAiC;AACxD,QAAMF,OAAO,GAAG,EAAhB;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,iBAApB,EAAuCM,CAAC,IAAI,CAA5C,EAA+C;AAC7C,QAAI;AACF,YAAMC,MAAM,GAAG,MAAMX,eAAe,CAACS,WAAD,CAApC;AACAF,MAAAA,OAAO,CAACK,IAAR,CAAaD,MAAb;AACD,KAHD,CAGE,OAAOE,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF;;AACD,SAAON,OAAP;AACD,CAXD;;AAYA,MAAMS,yBAAyB,GAAGjB,sBAAsB,CAACS,gBAAD,EAAmB,GAAnB,CAAxD;;AACA,MAAMS,SAAS,GAAG,CAACV,OAAD,EAAoBI,MAApB,KAAuC;AACvD,QAAMO,WAAW,GAAGhB,eAAe,CAAC,CAAD,EAAII,aAAa,CAACa,MAAd,GAAuB,CAA3B,CAAnC;AACA,SAAOb,aAAa,CAACY,WAAD,CAApB;AACD,CAHD;;AAKA,MAAME,UAAU,GAAG,CAAC;AAAEX,EAAAA;AAAF,CAAD,KAAgD;AACjE,QAAM;AAAA,OAACF,OAAD;AAAA,OAAUc;AAAV,MAAwBvB,QAAQ,CAAC,CAACO,cAAD,CAAD,CAAtC;AACA,QAAM;AAAA,OAACM,MAAD;AAAA,OAASW;AAAT,MAAsBxB,QAAQ,CAACO,cAAD,CAApC;;AAEA,QAAMkB,WAAW,GAAG,MAAM;AACxBT,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBR,OAAvB;AACA,UAAMiB,SAAS,GAAGP,SAAS,CAACV,OAAD,EAAUI,MAAV,CAA3B;;AACA,QAAIA,MAAM,KAAKJ,OAAO,CAAC,CAAD,CAAtB,EAA2B;AACzB,YAAMkB,UAAU,GAAG,CAACD,SAAD,EAAY,GAAGjB,OAAO,CAACmB,KAAR,CAAc,CAAd,CAAf,CAAnB;AACAJ,MAAAA,SAAS,CAACE,SAAD,CAAT;AACAH,MAAAA,UAAU,CAACI,UAAD,CAAV;AACD,KAJD,MAIO;AACLH,MAAAA,SAAS,CAACf,OAAO,CAAC,CAAD,CAAR,CAAT;AACD;;AACD,QAAIkB,UAAU,GAAIlB,OAAO,IAAIA,OAAO,CAACmB,KAAR,CAAc,CAAd,CAAZ,IAAiC,EAAlD;;AACA,QAAID,UAAU,CAACN,MAAX,IAAqB,CAAzB,EAA4B;AAC1BH,MAAAA,yBAAyB,CAACP,WAAD,CAAzB,CAAuCkB,IAAvC,CAA6CC,aAAD,IAAmB;AAC7DP,QAAAA,UAAU,CAACI,UAAU,CAACI,MAAX,CAAkBD,aAAlB,CAAD,CAAV;AACD,OAFD;AAGD,KAJD,MAIO;AACLH,MAAAA,UAAU,GAAGlB,OAAO,CAACmB,KAAR,CAAc,CAAd,CAAb;AACAL,MAAAA,UAAU,CAACI,UAAD,CAAV;AACD;AACF,GAnBD;;AAqBA,SACE;AAAA,wCAAe,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,OAAO,EAAEF,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2BZ,MAA3B,CADF;AAAA;AAAA;AAAA,sgJADF;AA0BD,CAnDD;;AAqDA,MAAMmB,eAAe,GAAG,YAAY;AAClC,QAAMrB,WAAW,GAAG,MAAMR,cAAc,EAAxC;AACA,SAAO;AAAEQ,IAAAA;AAAF,GAAP;AACD,CAHD;;AAIAW,UAAU,CAACU,eAAX,GAA6BA,eAA7B;AAEA,eAAeV,UAAf","sourcesContent":["import { useState } from 'react';\nimport AwesomeDebouncePromise from 'awesome-debounce-promise';\nimport getRandomPhrase from '../random-text/src/get-random-text';\nimport { getRandomWords, getRandomNumber } from '../random-text/src/utils';\nimport * as textJson from '../random-text/text/strings.json';\n\nconst NUMBER_OF_PHRASES = 3;\nconst STARTER_PHRASE = 'get random text';\nconst STOCK_PHRASES = textJson.phrases;\n\nconst getRandomPhrases = async (randomWords: string[]) => {\n  const phrases = [];\n  for (let i = 0; i < NUMBER_OF_PHRASES; i += 1) {\n    try {\n      const phrase = await getRandomPhrase(randomWords);\n      phrases.push(phrase);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n  return phrases;\n};\nconst getRandomPhrasesDebounced = AwesomeDebouncePromise(getRandomPhrases, 500);\nconst getPhrase = (phrases: string[], phrase: string) => {\n  const randomIndex = getRandomNumber(0, STOCK_PHRASES.length - 1);\n  return STOCK_PHRASES[randomIndex];\n};\n\nconst RandomText = ({ randomWords }: { randomWords: string[] }) => {\n  const [phrases, setPhrases] = useState([STARTER_PHRASE]);\n  const [phrase, setPhrase] = useState(STARTER_PHRASE);\n\n  const handleClick = () => {\n    console.log('phrases', phrases);\n    const newPhrase = getPhrase(phrases, phrase);\n    if (phrase === phrases[0]) {\n      const newPhrases = [newPhrase, ...phrases.slice(1)];\n      setPhrase(newPhrase);\n      setPhrases(newPhrases);\n    } else {\n      setPhrase(phrases[0]);\n    }\n    let newPhrases = (phrases && phrases.slice(1)) || [];\n    if (newPhrases.length <= 1) {\n      getRandomPhrasesDebounced(randomWords).then((randomPhrases) => {\n        setPhrases(newPhrases.concat(randomPhrases));\n      });\n    } else {\n      newPhrases = phrases.slice(1);\n      setPhrases(newPhrases);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h1 onClick={handleClick}>{phrase}</h1>\n      <style jsx global>\n        {`\n          @import url('https://fonts.googleapis.com/css?family=Fira+Code&display=swap');\n          body {\n            background: #000;\n          }\n\n          .container {\n            display: flex;\n            height: 100vh;\n            justify-content: center;\n            align-items: center;\n          }\n\n          h1 {\n            color: rgb(255, 235, 238);\n            cursor: pointer;\n            font: 32px 'fira code', menlo, helvetica, arial, sans-serif;\n          }\n        `}\n      </style>\n    </div>\n  );\n};\n\nconst getInitialProps = async () => {\n  const randomWords = await getRandomWords();\n  return { randomWords };\n};\nRandomText.getInitialProps = getInitialProps;\n\nexport default RandomText;\n"]},"metadata":{},"sourceType":"module"}