{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\n\nconst getPOS = async word => {\n  const datamuseApiRes = await fetch(`https://api.datamuse.com/words?sp=${word}&md=p&max=1`);\n  const datamuseApiJson = await datamuseApiRes.json();\n  const wordObj = datamuseApiJson[0];\n\n  if (wordObj && wordObj.tags) {\n    const {\n      tags\n    } = wordObj;\n    return tags;\n  }\n\n  return ['prop'];\n};\n\nconst wordIsThisPOS = async (word, pos) => {\n  const datamuseApiRes = await fetch(`https://api.datamuse.com/words?sp=${word}&md=p&max=1`);\n  const datamuseApiJson = await datamuseApiRes.json();\n  const wordObj = datamuseApiJson[0];\n\n  if (wordObj && wordObj.tags) {\n    const {\n      tags\n    } = wordObj;\n    return tags.includes(pos);\n  }\n\n  return false;\n};\n\nconst isPos = str => {\n  const validPos = ['adj', 'adv', 'conjunctions', 'determiners', 'n', 'v', 'prop'];\n  return validPos.includes(str);\n};\n\nconst isMuseApiPartOfSpeech = str => {\n  const validPos = ['adj', 'adv', 'n', 'v', 'prop'];\n  return validPos.includes(str);\n};\n\nexport { getPOS, wordIsThisPOS, isPos, isMuseApiPartOfSpeech };","map":{"version":3,"sources":["/Users/jasonoverby/p/random-text-site/random-text/src/pos.ts"],"names":["fetch","getPOS","word","datamuseApiRes","datamuseApiJson","json","wordObj","tags","wordIsThisPOS","pos","includes","isPos","str","validPos","isMuseApiPartOfSpeech"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;;AASA,MAAMC,MAAM,GAAG,MAAOC,IAAP,IAAyD;AACtE,QAAMC,cAAmB,GAAG,MAAMH,KAAK,CACpC,qCAAoCE,IAAK,aADL,CAAvC;AAGA,QAAME,eAAe,GAAG,MAAMD,cAAc,CAACE,IAAf,EAA9B;AACA,QAAMC,OAAY,GAAGF,eAAe,CAAC,CAAD,CAApC;;AACA,MAAIE,OAAO,IAAIA,OAAO,CAACC,IAAvB,EAA6B;AAC3B,UAAM;AAAEA,MAAAA;AAAF,QAAWD,OAAjB;AACA,WAAOC,IAAP;AACD;;AAED,SAAO,CAAC,MAAD,CAAP;AACD,CAZD;;AAcA,MAAMC,aAAa,GAAG,OACpBN,IADoB,EAEpBO,GAFoB,KAGC;AACrB,QAAMN,cAAmB,GAAG,MAAMH,KAAK,CACpC,qCAAoCE,IAAK,aADL,CAAvC;AAGA,QAAME,eAAe,GAAG,MAAMD,cAAc,CAACE,IAAf,EAA9B;AACA,QAAMC,OAAY,GAAGF,eAAe,CAAC,CAAD,CAApC;;AACA,MAAIE,OAAO,IAAIA,OAAO,CAACC,IAAvB,EAA6B;AAC3B,UAAM;AAAEA,MAAAA;AAAF,QAAWD,OAAjB;AACA,WAAOC,IAAI,CAACG,QAAL,CAAcD,GAAd,CAAP;AACD;;AACD,SAAO,KAAP;AACD,CAdD;;AAeA,MAAME,KAAK,GAAIC,GAAD,IAA6B;AACzC,QAAMC,QAAQ,GAAG,CACf,KADe,EAEf,KAFe,EAGf,cAHe,EAIf,aAJe,EAKf,GALe,EAMf,GANe,EAOf,MAPe,CAAjB;AASA,SAAOA,QAAQ,CAACH,QAAT,CAAkBE,GAAlB,CAAP;AACD,CAXD;;AAYA,MAAME,qBAAqB,GAAIF,GAAD,IAA8C;AAC1E,QAAMC,QAAQ,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,GAAf,EAAoB,GAApB,EAAyB,MAAzB,CAAjB;AACA,SAAOA,QAAQ,CAACH,QAAT,CAAkBE,GAAlB,CAAP;AACD,CAHD;;AAKA,SAASX,MAAT,EAAiBO,aAAjB,EAAgCG,KAAhC,EAAuCG,qBAAvC","sourcesContent":["import fetch from 'isomorphic-unfetch';\n\ntype MuseApiPartsOfSpeech = 'adj' | 'adv' | 'v' | 'n' | 'prop';\ntype Pos =\n  | MuseApiPartsOfSpeech\n  | 'determiners'\n  | 'conjunctions'\n  | 'prepositions';\n\nconst getPOS = async (word: string): Promise<MuseApiPartsOfSpeech[]> => {\n  const datamuseApiRes: any = await fetch(\n    `https://api.datamuse.com/words?sp=${word}&md=p&max=1`,\n  );\n  const datamuseApiJson = await datamuseApiRes.json();\n  const wordObj: any = datamuseApiJson[0];\n  if (wordObj && wordObj.tags) {\n    const { tags } = wordObj;\n    return tags;\n  }\n\n  return ['prop'];\n};\n\nconst wordIsThisPOS = async (\n  word: string,\n  pos: MuseApiPartsOfSpeech,\n): Promise<boolean> => {\n  const datamuseApiRes: any = await fetch(\n    `https://api.datamuse.com/words?sp=${word}&md=p&max=1`,\n  );\n  const datamuseApiJson = await datamuseApiRes.json();\n  const wordObj: any = datamuseApiJson[0];\n  if (wordObj && wordObj.tags) {\n    const { tags } = wordObj;\n    return tags.includes(pos);\n  }\n  return false;\n};\nconst isPos = (str: string): str is Pos => {\n  const validPos = [\n    'adj',\n    'adv',\n    'conjunctions',\n    'determiners',\n    'n',\n    'v',\n    'prop',\n  ];\n  return validPos.includes(str);\n};\nconst isMuseApiPartOfSpeech = (str: string): str is MuseApiPartsOfSpeech => {\n  const validPos = ['adj', 'adv', 'n', 'v', 'prop'];\n  return validPos.includes(str);\n};\n\nexport { getPOS, wordIsThisPOS, isPos, isMuseApiPartOfSpeech };\n"]},"metadata":{},"sourceType":"module"}