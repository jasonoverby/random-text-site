{"ast":null,"code":"const NUMBER_OF_WORDS_TO_FETCH = 100;\n\nconst isShiftable = arr => arr.length > 0;\n\nconst multilineStrToArrayOfWords = str => str.split(' ').filter(char => char !== '');\n\nconst getRandomNumber = (val1, val2) => {\n  const min = Math.min(val1, val2);\n  const max = Math.max(val1, val2);\n  if (min === max) return min;\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst removeNonAlphaChars = arr => arr.filter(word => /^[a-z]+$/i.test(word));\n\nconst shuffleArr = arr => {\n  let currentIndex = arr.length;\n  let temporaryValue;\n  let randomIndex; // While there remain elements to shuffle...\n\n  while (currentIndex !== 0) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1; // And swap it with the current element.\n\n    temporaryValue = arr[currentIndex];\n    arr[currentIndex] = arr[randomIndex];\n    arr[randomIndex] = temporaryValue;\n  }\n\n  return arr;\n};\n\nconst getRandomWords = async () => {\n  const wordsApiKeyRes = await fetch('https://random-word-api.herokuapp.com/key?');\n  const wordsApiKey = await wordsApiKeyRes.text();\n  const wordsApiRes = await fetch(`https://random-word-api.herokuapp.com/word?key=${wordsApiKey}&number=${NUMBER_OF_WORDS_TO_FETCH}`);\n  return wordsApiRes.json();\n};\n\nexport { isShiftable, multilineStrToArrayOfWords, getRandomNumber, getRandomWords, removeNonAlphaChars, shuffleArr };","map":{"version":3,"sources":["/Users/jasonoverby/p/random-text-site/random-text/src/utils.ts"],"names":["NUMBER_OF_WORDS_TO_FETCH","isShiftable","arr","length","multilineStrToArrayOfWords","str","split","filter","char","getRandomNumber","val1","val2","min","Math","max","floor","random","removeNonAlphaChars","word","test","shuffleArr","currentIndex","temporaryValue","randomIndex","getRandomWords","wordsApiKeyRes","fetch","wordsApiKey","text","wordsApiRes","json"],"mappings":"AAAA,MAAMA,wBAAwB,GAAG,GAAjC;;AACA,MAAMC,WAAW,GAAOC,GAAJ,IAClBA,GAAG,CAACC,MAAJ,GAAa,CADf;;AAEA,MAAMC,0BAA0B,GAAIC,GAAD,IACjCA,GAAG,CAACC,KAAJ,CAAU,GAAV,EAAeC,MAAf,CAAuBC,IAAD,IAAUA,IAAI,KAAK,EAAzC,CADF;;AAEA,MAAMC,eAAe,GAAG,CAACC,IAAD,EAAeC,IAAf,KAAgC;AACtD,QAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,CAASF,IAAT,EAAeC,IAAf,CAAZ;AACA,QAAMG,GAAG,GAAGD,IAAI,CAACC,GAAL,CAASJ,IAAT,EAAeC,IAAf,CAAZ;AACA,MAAIC,GAAG,KAAKE,GAAZ,EAAiB,OAAOF,GAAP;AACjB,SAAOC,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACG,MAAL,MAAiBF,GAAG,GAAGF,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAArD;AACD,CALD;;AAMA,MAAMK,mBAAmB,GAAIf,GAAD,IAC1BA,GAAG,CAACK,MAAJ,CAAYW,IAAD,IAAU,YAAYC,IAAZ,CAAiBD,IAAjB,CAArB,CADF;;AAEA,MAAME,UAAU,GAAIlB,GAAD,IAAgB;AACjC,MAAImB,YAAY,GAAGnB,GAAG,CAACC,MAAvB;AACA,MAAImB,cAAJ;AACA,MAAIC,WAAJ,CAHiC,CAKjC;;AACA,SAAOF,YAAY,KAAK,CAAxB,EAA2B;AACzB;AACAE,IAAAA,WAAW,GAAGV,IAAI,CAACE,KAAL,CAAWF,IAAI,CAACG,MAAL,KAAgBK,YAA3B,CAAd;AACAA,IAAAA,YAAY,IAAI,CAAhB,CAHyB,CAKzB;;AACAC,IAAAA,cAAc,GAAGpB,GAAG,CAACmB,YAAD,CAApB;AACAnB,IAAAA,GAAG,CAACmB,YAAD,CAAH,GAAoBnB,GAAG,CAACqB,WAAD,CAAvB;AACArB,IAAAA,GAAG,CAACqB,WAAD,CAAH,GAAmBD,cAAnB;AACD;;AAED,SAAOpB,GAAP;AACD,CAlBD;;AAmBA,MAAMsB,cAAc,GAAG,YAAY;AACjC,QAAMC,cAAc,GAAG,MAAMC,KAAK,CAChC,4CADgC,CAAlC;AAGA,QAAMC,WAAW,GAAG,MAAMF,cAAc,CAACG,IAAf,EAA1B;AACA,QAAMC,WAAW,GAAG,MAAMH,KAAK,CAC5B,kDAAiDC,WAAY,WAAU3B,wBAAyB,EADpE,CAA/B;AAGA,SAAO6B,WAAW,CAACC,IAAZ,EAAP;AACD,CATD;;AAWA,SACE7B,WADF,EAEEG,0BAFF,EAGEK,eAHF,EAIEe,cAJF,EAKEP,mBALF,EAMEG,UANF","sourcesContent":["const NUMBER_OF_WORDS_TO_FETCH = 100;\nconst isShiftable = <T>(arr: T[]): arr is { shift(): T } & Array<T> =>\n  arr.length > 0;\nconst multilineStrToArrayOfWords = (str: string) =>\n  str.split(' ').filter((char) => char !== '');\nconst getRandomNumber = (val1: number, val2: number) => {\n  const min = Math.min(val1, val2);\n  const max = Math.max(val1, val2);\n  if (min === max) return min;\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\nconst removeNonAlphaChars = (arr: string[]) =>\n  arr.filter((word) => /^[a-z]+$/i.test(word));\nconst shuffleArr = (arr: any[]) => {\n  let currentIndex = arr.length;\n  let temporaryValue;\n  let randomIndex;\n\n  // While there remain elements to shuffle...\n  while (currentIndex !== 0) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = arr[currentIndex];\n    arr[currentIndex] = arr[randomIndex];\n    arr[randomIndex] = temporaryValue;\n  }\n\n  return arr;\n};\nconst getRandomWords = async () => {\n  const wordsApiKeyRes = await fetch(\n    'https://random-word-api.herokuapp.com/key?',\n  );\n  const wordsApiKey = await wordsApiKeyRes.text();\n  const wordsApiRes = await fetch(\n    `https://random-word-api.herokuapp.com/word?key=${wordsApiKey}&number=${NUMBER_OF_WORDS_TO_FETCH}`,\n  );\n  return wordsApiRes.json();\n};\n\nexport {\n  isShiftable,\n  multilineStrToArrayOfWords,\n  getRandomNumber,\n  getRandomWords,\n  removeNonAlphaChars,\n  shuffleArr,\n};\n"]},"metadata":{},"sourceType":"module"}