{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport fetch from 'isomorphic-unfetch';\n\nvar getPOS =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(word) {\n    var datamuseApiRes, datamuseApiJson, wordObj, tags;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(\"https://api.datamuse.com/words?sp=\".concat(word, \"&md=p&max=1\"));\n\n          case 2:\n            datamuseApiRes = _context.sent;\n            _context.next = 5;\n            return datamuseApiRes.json();\n\n          case 5:\n            datamuseApiJson = _context.sent;\n            wordObj = datamuseApiJson[0];\n\n            if (!(wordObj && wordObj.tags)) {\n              _context.next = 10;\n              break;\n            }\n\n            tags = wordObj.tags;\n            return _context.abrupt(\"return\", tags);\n\n          case 10:\n            return _context.abrupt(\"return\", ['prop']);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getPOS(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar wordIsThisPOS =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(word, pos) {\n    var datamuseApiRes, datamuseApiJson, wordObj, tags;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fetch(\"https://api.datamuse.com/words?sp=\".concat(word, \"&md=p&max=1\"));\n\n          case 2:\n            datamuseApiRes = _context2.sent;\n            _context2.next = 5;\n            return datamuseApiRes.json();\n\n          case 5:\n            datamuseApiJson = _context2.sent;\n            wordObj = datamuseApiJson[0];\n\n            if (!(wordObj && wordObj.tags)) {\n              _context2.next = 10;\n              break;\n            }\n\n            tags = wordObj.tags;\n            return _context2.abrupt(\"return\", tags.includes(pos));\n\n          case 10:\n            return _context2.abrupt(\"return\", false);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function wordIsThisPOS(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar isPos = function isPos(str) {\n  var validPos = ['adj', 'adv', 'conjunctions', 'determiners', 'n', 'v', 'prop'];\n  return validPos.includes(str);\n};\n\nvar isMuseApiPartOfSpeech = function isMuseApiPartOfSpeech(str) {\n  var validPos = ['adj', 'adv', 'n', 'v', 'prop'];\n  return validPos.includes(str);\n};\n\nexport { getPOS, wordIsThisPOS, isPos, isMuseApiPartOfSpeech };","map":{"version":3,"sources":["/Users/jasonoverby/p/random-text-site/random-text/src/pos.ts"],"names":["fetch","getPOS","word","datamuseApiRes","json","datamuseApiJson","wordObj","tags","wordIsThisPOS","pos","includes","isPos","str","validPos","isMuseApiPartOfSpeech"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,oBAAlB;;AASA,IAAMC,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACqBF,KAAK,6CACAE,IADA,iBAD1B;;AAAA;AACPC,YAAAA,cADO;AAAA;AAAA,mBAIiBA,cAAc,CAACC,IAAf,EAJjB;;AAAA;AAIPC,YAAAA,eAJO;AAKPC,YAAAA,OALO,GAKQD,eAAe,CAAC,CAAD,CALvB;;AAAA,kBAMTC,OAAO,IAAIA,OAAO,CAACC,IANV;AAAA;AAAA;AAAA;;AAOHA,YAAAA,IAPG,GAOMD,OAPN,CAOHC,IAPG;AAAA,6CAQJA,IARI;;AAAA;AAAA,6CAWN,CAAC,MAAD,CAXM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANN,MAAM;AAAA;AAAA;AAAA,GAAZ;;AAcA,IAAMO,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBACpBN,IADoB,EAEpBO,GAFoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIcT,KAAK,6CACAE,IADA,iBAJnB;;AAAA;AAIdC,YAAAA,cAJc;AAAA;AAAA,mBAOUA,cAAc,CAACC,IAAf,EAPV;;AAAA;AAOdC,YAAAA,eAPc;AAQdC,YAAAA,OARc,GAQCD,eAAe,CAAC,CAAD,CARhB;;AAAA,kBAShBC,OAAO,IAAIA,OAAO,CAACC,IATH;AAAA;AAAA;AAAA;;AAUVA,YAAAA,IAVU,GAUDD,OAVC,CAUVC,IAVU;AAAA,8CAWXA,IAAI,CAACG,QAAL,CAAcD,GAAd,CAXW;;AAAA;AAAA,8CAab,KAba;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbD,aAAa;AAAA;AAAA;AAAA,GAAnB;;AAeA,IAAMG,KAAK,GAAG,SAARA,KAAQ,CAACC,GAAD,EAA6B;AACzC,MAAMC,QAAQ,GAAG,CACf,KADe,EAEf,KAFe,EAGf,cAHe,EAIf,aAJe,EAKf,GALe,EAMf,GANe,EAOf,MAPe,CAAjB;AASA,SAAOA,QAAQ,CAACH,QAAT,CAAkBE,GAAlB,CAAP;AACD,CAXD;;AAYA,IAAME,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACF,GAAD,EAA8C;AAC1E,MAAMC,QAAQ,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,GAAf,EAAoB,GAApB,EAAyB,MAAzB,CAAjB;AACA,SAAOA,QAAQ,CAACH,QAAT,CAAkBE,GAAlB,CAAP;AACD,CAHD;;AAKA,SAASX,MAAT,EAAiBO,aAAjB,EAAgCG,KAAhC,EAAuCG,qBAAvC","sourcesContent":["import fetch from 'isomorphic-unfetch';\n\ntype MuseApiPartsOfSpeech = 'adj' | 'adv' | 'v' | 'n' | 'prop';\ntype Pos =\n  | MuseApiPartsOfSpeech\n  | 'determiners'\n  | 'conjunctions'\n  | 'prepositions';\n\nconst getPOS = async (word: string): Promise<MuseApiPartsOfSpeech[]> => {\n  const datamuseApiRes: any = await fetch(\n    `https://api.datamuse.com/words?sp=${word}&md=p&max=1`,\n  );\n  const datamuseApiJson = await datamuseApiRes.json();\n  const wordObj: any = datamuseApiJson[0];\n  if (wordObj && wordObj.tags) {\n    const { tags } = wordObj;\n    return tags;\n  }\n\n  return ['prop'];\n};\n\nconst wordIsThisPOS = async (\n  word: string,\n  pos: MuseApiPartsOfSpeech,\n): Promise<boolean> => {\n  const datamuseApiRes: any = await fetch(\n    `https://api.datamuse.com/words?sp=${word}&md=p&max=1`,\n  );\n  const datamuseApiJson = await datamuseApiRes.json();\n  const wordObj: any = datamuseApiJson[0];\n  if (wordObj && wordObj.tags) {\n    const { tags } = wordObj;\n    return tags.includes(pos);\n  }\n  return false;\n};\nconst isPos = (str: string): str is Pos => {\n  const validPos = [\n    'adj',\n    'adv',\n    'conjunctions',\n    'determiners',\n    'n',\n    'v',\n    'prop',\n  ];\n  return validPos.includes(str);\n};\nconst isMuseApiPartOfSpeech = (str: string): str is MuseApiPartsOfSpeech => {\n  const validPos = ['adj', 'adv', 'n', 'v', 'prop'];\n  return validPos.includes(str);\n};\n\nexport { getPOS, wordIsThisPOS, isPos, isMuseApiPartOfSpeech };\n"]},"metadata":{},"sourceType":"module"}